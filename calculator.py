import pickle
import os
import re
import requests
import time
import logging
import xml.etree.ElementTree as ET

from datetime import datetime
from urllib.parse import urlparse, parse_qs
from selenium import webdriver
from dotenv import load_dotenv
from telebot import types
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import NoAlertPresentException

# utils.py import
from config import bot
from utils import calculate_age, format_number, print_message


load_dotenv()

CHROMEDRIVER_PATH = os.getenv("CHROMEDRIVER_PATH_LOCAL")
COOKIES_FILE = "cookies.pkl"

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
car_data = {}
car_id_external = None
usd_rate = 0
usd_rate_kz = 0
usd_rate_krg = 0
krw_rate_kz = 0
current_country = ""
car_fuel_type = ""


def get_usd_to_krw_rate():
    url = "https://api.manana.kr/exchange/rate.json?base=KRW&code=KRW,USD,JPY"
    response = requests.get(url)
    if response.status_code == 200:
        rates = response.json()
        for rate in rates:
            if rate["name"] == "USDKRW=X":
                return rate["rate"]
    else:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")


# –†–∞—Å—á—ë—Ç —Ç–∞—Ä–∏—Ñ–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
def calculate_customs_fee_kzt(price_kzt, year):
    current_year = datetime.now().year  # –∏–ª–∏ –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    car_age = int(current_year) - int(year)

    if car_age <= 3:
        customs_fee_rate = 0.10  # 10% –¥–ª—è –∞–≤—Ç–æ –¥–æ 3 –ª–µ—Ç
    elif car_age <= 7:
        customs_fee_rate = 0.15  # 15% –¥–ª—è –∞–≤—Ç–æ –¥–æ 7 –ª–µ—Ç
    else:
        customs_fee_rate = 0.18  # 18% –¥–ª—è –∞–≤—Ç–æ —Å—Ç–∞—Ä—à–µ 7 –ª–µ—Ç

    customs_fee = price_kzt * customs_fee_rate
    return customs_fee


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
def show_country_selection(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_russia = types.KeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è")
    btn_kazakhstan = types.KeyboardButton("üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω")
    btn_kyrgyzstan = types.KeyboardButton("üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é
    markup.add(btn_russia, btn_kazakhstan, btn_kyrgyzstan)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    bot.send_message(
        chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:", reply_markup=markup
    )


# –ö—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞
def get_nbkr_currency_rates():
    global usd_rate_krg

    print_message("[–ö–£–†–°] –ö–´–†–ì–´–ó–°–¢–ê–ù")

    url = "https://www.nbkr.kg/XML/daily.xml"

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API –ù–ë–ö–†
        response = requests.get(url)
        response.raise_for_status()

        # –ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞
        root = ET.fromstring(response.content)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        currency_rates = {}

        # –í–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
        target_currencies = {"USD", "EUR", "RUB", "CNY"}

        # –î–∞—Ç–∞ –∫—É—Ä—Å–∞
        rates_date = root.get("Date")

        # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö –≤–∞–ª—é—Ç –≤ XML-–¥–µ—Ä–µ–≤–µ
        for item in root.findall("./Currency"):
            # –ü–æ–ª—É—á–∞–µ–º ISOCode –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ Currency
            code = item.get("ISOCode")
            rate_element = item.find("Value")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏ –∫–æ–¥ –≤–∞–ª—é—Ç—ã, –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if code in target_currencies and rate_element is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –≤ —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è –∫—É—Ä—Å –≤ float —Å –∑–∞–º–µ–Ω–æ–π –∑–∞–ø—è—Ç–æ–π –Ω–∞ —Ç–æ—á–∫—É
                rate = float(rate_element.text.replace(",", "."))
                currency_rates[code] = rate

        usd_rate_krg = currency_rates["USD"]

        rates_text = (
            f"–ö—É—Ä—Å –í–∞–ª—é—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω ({rates_date}):\n\n"
            f"EUR: {currency_rates['EUR']:.2f} KGS\n"
            f"USD: {currency_rates['USD']:.2f} KGS\n"
            f"KRW: {currency_rates['RUB']:.2f} KGS\n"
            f"CNY: {currency_rates['CNY']:.2f} KGS\n"
        )

        return rates_text

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ù–ë–ö–† API: {e}")
        return None
    except ET.ParseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ XML: {e}")
        return None


# –ö—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
def get_nbk_currency_rates():
    print_message("[–ö–£–†–°] –ö–ê–ó–ê–•–°–¢–ê–ù")

    global usd_rate_kz, krw_rate_kz

    url = "https://nationalbank.kz/rss/rates_all.xml"

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API –ù–ë–ö
        response = requests.get(url)
        response.raise_for_status()

        # –ü–∞—Ä—Å–∏–Ω–≥ XML-–æ—Ç–≤–µ—Ç–∞
        root = ET.fromstring(response.content)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        currency_rates = {}

        # –í–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
        target_currencies = {"USD", "EUR", "KRW", "CNY"}

        # –î–∞—Ç–∞ –∫—É—Ä—Å–∞
        rates_date = ""

        # –ù–æ–º–∏–Ω–∞–ª—ã
        nominals = {}

        # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω—ã—Ö –≤–∞–ª—é—Ç –≤ XML-–¥–µ—Ä–µ–≤–µ
        for item in root.findall("./channel/item"):
            title = item.find("title").text  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "USD")
            description = item.find("description").text  # –ö—É—Ä—Å –∫ —Ç–µ–Ω–≥–µ
            rates_date = item.find("pubDate").text
            nominal = item.find("quant").text

            if title in target_currencies:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—É—Ä—Å –≤ float
                currency_rates[title] = float(description)
                nominals[title] = float(nominal)

        usd_rate_kz = float(currency_rates["USD"])
        krw_rate_kz = float(currency_rates["KRW"]) / nominals["KRW"]

        rates_text = (
            f"–ö—É—Ä—Å –í–∞–ª—é—Ç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω ({rates_date}):\n\n"
            f"EUR: {currency_rates['EUR']:.2f} ‚Ç∏\n"
            f"USD: {currency_rates['USD']:.2f} ‚Ç∏\n"
            f"KRW: {currency_rates['KRW']:.2f} ‚Ç∏\n"
            f"CNY: {currency_rates['CNY']:.2f} ‚Ç∏\n"
        )

        return rates_text

    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ù–ë–ö API: {e}")
        return None
    except ET.ParseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ XML: {e}")
        return None


# –ö—É—Ä—Å –≤–∞–ª—é—Ç –¥–ª—è –†–æ—Å—Å–∏–∏
def get_currency_rates():
    print_message("[–ö–£–†–°] –†–û–°–°–ò–Ø")

    global usd_rate

    url = "https://www.cbr-xml-daily.ru/daily_json.js"
    response = requests.get(url)
    data = response.json()

    # –î–∞—Ç–∞ –∫—É—Ä—Å–∞
    rates_date = datetime.now().strftime("%d.%m.%Y")

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
    eur_rate = data["Valute"]["EUR"]["Value"]
    usd_rate = data["Valute"]["USD"]["Value"]
    krw_rate = data["Valute"]["KRW"]["Value"] / data["Valute"]["KRW"]["Nominal"]
    cny_rate = data["Valute"]["CNY"]["Value"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    rates_text = (
        f"–ö—É—Ä—Å –≤–∞–ª—é—Ç –¶–ë ({rates_date}):\n\n"
        f"EUR {eur_rate:.2f} ‚ÇΩ\n"
        f"USD {usd_rate:.2f} ‚ÇΩ\n"
        f"KRW {krw_rate:.2f} ‚ÇΩ\n"
        f"CNY {cny_rate:.2f} ‚ÇΩ"
    )

    return rates_text


def save_cookies(driver):
    with open(COOKIES_FILE, "wb") as file:
        pickle.dump(driver.get_cookies(), file)


# Load cookies from file
def load_cookies(driver):
    if os.path.exists(COOKIES_FILE):
        with open(COOKIES_FILE, "rb") as file:
            cookies = pickle.load(file)
            for cookie in cookies:
                driver.add_cookie(cookie)


def send_error_message(message, error_text):
    global last_error_message_id

    # Remove previous error message if it exists
    if last_error_message_id.get(message.chat.id):
        try:
            bot.delete_message(message.chat.id, last_error_message_id[message.chat.id])
        except Exception as e:
            logging.error(f"Error deleting message: {e}")

    # Send new error message and store its ID
    error_message = bot.reply_to(message, error_text)
    last_error_message_id[message.chat.id] = error_message.id
    logging.error(f"Error sent to user {message.chat.id}: {error_text}")


def check_and_handle_alert(driver):
    try:
        WebDriverWait(driver, 4).until(EC.alert_is_present())
        alert = driver.switch_to.alert
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ: {alert.text}")
        alert.accept()  # –ó–∞–∫—Ä—ã–≤–∞–µ—Ç alert
        print("–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ.")
    except TimeoutException:
        print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.")
    except Exception as alert_exception:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ alert: {alert_exception}")


def get_car_info(url):
    global car_id_external, car_fuel_type

    chrome_options = Options()
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")  # –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Heroku
    chrome_options.add_argument("--disable-dev-shm-usage")  # –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é
    chrome_options.add_argument("--window-size=1920,1080")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--enable-logging")
    chrome_options.add_argument("--v=1")  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
    service = Service(CHROMEDRIVER_PATH)
    driver = webdriver.Chrome(service=service, options=chrome_options)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        driver.get(url)
        check_and_handle_alert(driver)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ alert, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        load_cookies(driver)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ reCAPTCHA
        if "reCAPTCHA" in driver.page_source:
            logging.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ reCAPTCHA. –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å...")
            driver.refresh()
            logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ reCAPTCHA.")
            check_and_handle_alert(driver)  # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        save_cookies(driver)
        logging.info("–ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è carid
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)
        car_id = query_params.get("carid", [None])[0]
        car_id_external = car_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ areaLeaseRent
        try:
            lease_area = driver.find_element(By.ID, "areaLeaseRent")
            title_element = lease_area.find_element(By.CLASS_NAME, "title")

            if "Î¶¨Ïä§Ï†ïÎ≥¥" in title_element.text or "Î†åÌä∏Ï†ïÎ≥¥" in title_element.text:
                logging.info("–î–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–∏–∑–∏–Ω–≥–µ.")
                return [
                    "",
                    "–î–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–∏–∑–∏–Ω–≥–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                ]
        except NoSuchElementException:
            logging.warning("–≠–ª–µ–º–µ–Ω—Ç areaLeaseRent –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        car_title, car_date, car_engine_capacity, car_price = "", "", "", ""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ product_left
        try:
            product_left = WebDriverWait(driver, 6).until(
                EC.presence_of_element_located((By.CLASS_NAME, "product_left"))
            )
            product_left_splitted = product_left.text.split("\n")

            car_title = product_left.find_element(
                By.CLASS_NAME, "prod_name"
            ).text.strip()

            car_date = (
                product_left_splitted[3] if len(product_left_splitted) > 3 else ""
            )
            car_engine_capacity = (
                product_left_splitted[6] if len(product_left_splitted) > 6 else ""
            )
            car_price = re.sub(r"\D", "", product_left_splitted[1])
            car_fuel_type = (
                product_left_splitted[4] if len(product_left_splitted) > 6 else ""
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            formatted_price = car_price.replace(",", "")
            formatted_engine_capacity = (
                car_engine_capacity.replace(",", "")[:-2]
                if car_engine_capacity
                else "0"
            )
            cleaned_date = "".join(filter(str.isdigit, car_date))
            formatted_date = (
                f"01{cleaned_date[2:4]}{cleaned_date[:2]}" if cleaned_date else "010101"
            )

            # –°–æ–∑–¥–∞–Ω–∏–µ URL
            new_url = f"https://plugin-back-versusm.amvera.io/car-ab-korea/{car_id}?price={formatted_price}&date={formatted_date}&volume={formatted_engine_capacity}"
            logging.info(f"–î–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: {new_url}, {car_title}")
            return [new_url, car_title]
        except NoSuchElementException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ product_left: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ product_left: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ gallery_photo
        try:
            gallery_element = driver.find_element(By.CSS_SELECTOR, "div.gallery_photo")
            car_title = gallery_element.find_element(By.CLASS_NAME, "prod_name").text
            items = gallery_element.find_elements(By.XPATH, ".//*")

            if len(items) > 10:
                car_date = items[10].text
                car_fuel_type = items[5].text.split(" ")[1]
            if len(items) > 18:
                car_engine_capacity = items[18].text

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö
            try:
                keyinfo_element = driver.find_element(
                    By.CSS_SELECTOR, "div.wrap_keyinfo"
                )
                keyinfo_items = keyinfo_element.find_elements(By.XPATH, ".//*")
                keyinfo_texts = [
                    item.text for item in keyinfo_items if item.text.strip()
                ]

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                car_price = (
                    re.sub(r"\D", "", keyinfo_texts[12])
                    if len(keyinfo_texts) > 12
                    else None
                )
            except NoSuchElementException:
                logging.warning("–≠–ª–µ–º–µ–Ω—Ç wrap_keyinfo –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except NoSuchElementException:
            logging.warning("–≠–ª–µ–º–µ–Ω—Ç gallery_photo —Ç–∞–∫–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è URL
        if car_price:
            formatted_price = car_price.replace(",", "")
        else:
            formatted_price = "0"  # –ó–∞–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        formatted_engine_capacity = (
            car_engine_capacity.replace(",", "")[:-2] if car_engine_capacity else "0"
        )
        cleaned_date = "".join(filter(str.isdigit, car_date))
        formatted_date = (
            f"01{cleaned_date[2:4]}{cleaned_date[:2]}" if cleaned_date else "010101"
        )

        new_url = ""

        # –ö–æ–Ω–µ—á–Ω—ã–π URL
        new_url = f"https://plugin-back-versusm.amvera.io/car-ab-korea/{car_id}?price={formatted_price}&date={formatted_date}&volume={formatted_engine_capacity}"
        logging.info(f"–î–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–µ –ø–æ–ª—É—á–µ–Ω—ã: {new_url}, {car_title}")
        return [new_url, car_title]

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None, None

    finally:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω (alerts)
        try:
            alert = driver.switch_to.alert
            alert.dismiss()
            logging.info("–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
        except NoAlertPresentException:
            logging.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞.")
        except Exception as alert_exception:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ alert: {alert_exception}")

        driver.quit()


def calculate_car_cost(country, message):
    global car_data, usd_rate_kz, krw_rate_kz, current_country, usd_rate_krg

    link = message.text
    current_country = country

    # Russia
    if country == "Russia":
        if link:
            print_message("[–†–û–°–°–ò–Ø] –ù–û–í–´–ô –ó–ê–ü–†–û–°")

            # Check if the link is from the mobile version
            if "fem.encar.com" in link:
                # Extract all digits from the mobile link
                car_id_match = re.findall(r"\d+", link)
                if car_id_match:
                    car_id = car_id_match[0]  # Use the first match of digits
                    # Create the new URL
                    link = (
                        f"https://www.encar.com/dc/dc_cardetailview.do?carid={car_id}"
                    )
                else:
                    send_error_message(
                        message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏."
                    )
                    return

            # Get car info and new URL
            result = get_car_info(link)
            time.sleep(5)

            if result is None:
                send_error_message(
                    message,
                    "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
                return

            new_url, car_title = result

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–∑–∏–Ω–≥–µ
            if not new_url and car_title:
                # Inline buttons for further actions
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/manager"
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        callback_data="calculate_another",
                    ),
                )
                bot.send_message(
                    message.chat.id,
                    car_title,  # —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –º–∞—à–∏–Ω–∞ –ª–∏–∑–∏–Ω–≥–æ–≤–∞—è
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

            if new_url:
                response = requests.get(new_url)

                if response.status_code == 200:
                    json_response = response.json()
                    car_data = json_response

                    # Extract year from the car date string
                    year = json_response.get("result")["car"]["date"].split()[-1]
                    engine_volume = json_response.get("result")["car"]["engineVolume"]
                    price = json_response.get("result")["price"]["car"]["krw"]

                    if year and engine_volume and price:
                        engine_volume_formatted = (
                            f"{format_number(int(engine_volume))} cc"
                        )
                        age_formatted = calculate_age(year)

                        # Car's price in KRW
                        price_formatted = format_number(price)

                        # Price in USD
                        total_cost_rub = json_response.get("result")["price"][
                            "grandTotal"
                        ]

                        result_message = (
                            f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ê–≤—Ç–æ –≤ –ö–æ—Ä–µ–µ: {price_formatted} KRW\n"
                            f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: \n**{format_number(total_cost_rub)} ‚ÇΩ**\n\n"
                            f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({link})\n\n"
                            "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @MANAGER\n\n"
                            "üîó[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª](https://t.me/telegram_channel)\n"
                        )

                        bot.send_message(
                            message.chat.id, result_message, parse_mode="Markdown"
                        )

                        # Inline buttons for further actions
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail"
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                                callback_data="technical_report",
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/alekseyan85"
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                                callback_data="calculate_another",
                            ),
                        )

                        bot.send_message(
                            message.chat.id,
                            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–∑ —Å–ø–∏—Å–∫–∞",
                            reply_markup=keyboard,
                        )
                    else:
                        bot.send_message(
                            message.chat.id,
                            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
                        )
                else:
                    send_error_message(
                        message,
                        "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    )
            else:
                send_error_message(
                    message,
                    "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
        else:
            return f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –¥–ª—è –†–æ—Å—Å–∏–∏ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º {car_data} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 400,000 —Ä—É–±–ª–µ–π."

    ############
    # Kazakhstan
    ############
    elif country == "Kazakhstan":
        if link:
            print_message("[–ö–ê–ó–ê–•–°–¢–ê–ù] –ù–û–í–´–ô –ó–ê–ü–†–û–°")

            # Check if the link is from the mobile version
            if "fem.encar.com" in link:
                # Extract all digits from the mobile link
                car_id_match = re.findall(r"\d+", link)
                if car_id_match:
                    car_id = car_id_match[0]  # Use the first match of digits
                    # Create the new URL
                    link = (
                        f"https://www.encar.com/dc/dc_cardetailview.do?carid={car_id}"
                    )
                else:
                    send_error_message(
                        message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏."
                    )
                    return

            # Get car info and new URL
            result = get_car_info(link)
            time.sleep(5)

            if result is None:
                send_error_message(
                    message,
                    "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
                return

            new_url, car_title = result

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–∑–∏–Ω–≥–µ
            if not new_url and car_title:
                # Inline buttons for further actions
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/manager"
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        callback_data="calculate_another",
                    ),
                )
                bot.send_message(
                    message.chat.id,
                    car_title,  # —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –º–∞—à–∏–Ω–∞ –ª–∏–∑–∏–Ω–≥–æ–≤–∞—è
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

            if new_url:
                response = requests.get(new_url)

                if response.status_code == 200:
                    json_response = response.json()
                    car_data = json_response

                    # Extract year from the car date string
                    year = json_response.get("result")["car"]["date"].split()[-1]
                    engine_volume = json_response.get("result")["car"]["engineVolume"]
                    price = json_response.get("result")["price"]["car"]["krw"]

                    if year and engine_volume and price:
                        engine_volume_formatted = (
                            f"{format_number(int(engine_volume))} cc"
                        )
                        age_formatted = calculate_age(year)

                        # Car's price in KRW
                        price_formatted = format_number(price)

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ KZT
                        price_won = int(price)  # –¶–µ–Ω–∞ –≤ –≤–æ–Ω–∞—Ö
                        exchange_rate = krw_rate_kz
                        price_kzt = price_won * exchange_rate

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–±–æ—Ä—ã (—Ä–∞—Å—á—ë—Ç—ã)
                        customs_fee = calculate_customs_fee_kzt(price_kzt, year)
                        vat = price_kzt * 0.12  # –ù–î–° 12%
                        customs_declaration_fee = 25152
                        excise_fee = (
                            0
                            if int(engine_volume) <= 3000
                            else (int(engine_volume) - 3000) * 100
                        )
                        bmauto_fee = 450000 * krw_rate_kz
                        broker_fee = 100000
                        delivery_fee = 2500 * usd_rate_kz

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                        evak_fee = 0  # –°—Ç–æ–∏–º–æ—Å—Ç—å —ç–≤–∞–∫—É–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                        sbkts_fee = 0  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                        total_cost_kzt = (
                            price_kzt
                            + customs_fee
                            + vat
                            + customs_declaration_fee
                            + excise_fee
                            + evak_fee
                            + sbkts_fee
                            + broker_fee
                            + delivery_fee
                            + bmauto_fee
                        )

                        result_message = (
                            f"–í–æ–∑—Ä–∞—Å—Ç: {age_formatted}\n"
                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ê–≤—Ç–æ –≤ –ö–æ—Ä–µ–µ: {price_formatted} KRW\n"
                            f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted}\n\n"
                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –ê–ª–º–∞—Ç—ã: \n**{format_number(total_cost_kzt)} ‚Ç∏**\n\n"
                            f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({link})\n\n"
                            "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @MANAGER\n\n"
                            "üîó[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª](https://t.me/telegram_channel)\n"
                        )

                        bot.send_message(
                            message.chat.id, result_message, parse_mode="Markdown"
                        )

                        # Inline buttons for further actions
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail"
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                                callback_data="technical_report",
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/manager"
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                                callback_data="calculate_another",
                            ),
                        )

                        bot.send_message(
                            message.chat.id,
                            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–∑ —Å–ø–∏—Å–∫–∞",
                            reply_markup=keyboard,
                        )
                    else:
                        bot.send_message(
                            message.chat.id,
                            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
                        )
                else:
                    send_error_message(
                        message,
                        "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    )
            else:
                send_error_message(
                    message,
                    "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
        else:
            return f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º {car_data} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 380,000 —Ç–µ–Ω–≥–µ."

    ############
    # Kyrgyzstan
    ############
    elif country == "Kyrgyzstan":
        if link:
            print_message("[–ö–´–†–ì–´–ó–°–¢–ê–ù] –ù–û–í–´–ô –ó–ê–ü–†–û–°")

            # Check if the link is from the mobile version
            if "fem.encar.com" in link:
                # Extract all digits from the mobile link
                car_id_match = re.findall(r"\d+", link)
                if car_id_match:
                    car_id = car_id_match[0]  # Use the first match of digits
                    # Create the new URL
                    link = (
                        f"https://www.encar.com/dc/dc_cardetailview.do?carid={car_id}"
                    )
                else:
                    send_error_message(
                        message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å carid –∏–∑ —Å—Å—ã–ª–∫–∏."
                    )
                    return

            # Get car info and new URL
            result = get_car_info(link)

            if result is None:
                send_error_message(
                    message,
                    "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
                return

            new_url, car_title = result

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–∑–∏–Ω–≥–µ
            if not new_url and car_title:
                # Inline buttons for further actions
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="https://t.me/manager"
                    ),
                )
                keyboard.add(
                    types.InlineKeyboardButton(
                        "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                        callback_data="calculate_another",
                    ),
                )
                bot.send_message(
                    message.chat.id,
                    car_title,  # —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –º–∞—à–∏–Ω–∞ –ª–∏–∑–∏–Ω–≥–æ–≤–∞—è
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

            if new_url:
                response = requests.get(new_url)

                if response.status_code == 200:
                    json_response = response.json()
                    car_data = json_response

                    # Extract year from the car date string
                    year = json_response.get("result")["car"]["date"].split()[-1]
                    engine_volume = json_response.get("result")["car"]["engineVolume"]
                    price_krw = json_response.get("result")["price"]["car"]["krw"]

                    if year and engine_volume and price_krw:
                        usd_to_krw_rate = get_usd_to_krw_rate()

                        # –ü–µ—Ä–µ–≤–æ–¥ —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä—ã
                        price_usd = int(price_krw) / usd_to_krw_rate
                        price_formatted = format_number(price_krw)

                        # –†–∞—Å—á–µ—Ç—ã
                        delivery_cost = 2500  # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
                        insurance_cost = 200  # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞
                        cif = price_usd + delivery_cost + insurance_cost  # CIF

                        # –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞
                        duty_rate_per_cc = 0.6  # $0.6 –∑–∞ 1 —Å–º¬≥
                        duty = int(engine_volume) * duty_rate_per_cc

                        # –ù–î–° 12%
                        vat = (cif + duty) * 0.12

                        # –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä
                        recycling_fee = 500  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞

                        # –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
                        total_cost_usd = format_number(cif + duty + vat + recycling_fee)

                        engine_volume_formatted = format_number(engine_volume)

                        # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        result_message = (
                            f"–í–æ–∑—Ä–∞—Å—Ç: {calculate_age(year)}\n"
                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ –≤ –ö–æ—Ä–µ–µ: {price_formatted}‚Ç©\n"
                            f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {engine_volume_formatted} cc\n\n"
                            f"–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ–¥ –∫–ª—é—á –¥–æ –ë–∏—à–∫–µ–∫–∞:\n"
                            f"**{total_cost_usd}$**\n\n"
                            f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å]({link})\n\n"
                            "–ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ —Å–∞–Ω–∫—Ü–∏–∏, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @MANAGER.\n\n"
                            "üîó[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª](https://t.me/telegram_channel)\n"
                        )

                        bot.send_message(
                            message.chat.id, result_message, parse_mode="Markdown"
                        )

                        # Inline buttons for further actions
                        keyboard = types.InlineKeyboardMarkup()
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞", callback_data="detail"
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                                callback_data="technical_report",
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/manager"
                            ),
                        )
                        keyboard.add(
                            types.InlineKeyboardButton(
                                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                                callback_data="calculate_another",
                            ),
                        )

                        bot.send_message(
                            message.chat.id,
                            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–∑ —Å–ø–∏—Å–∫–∞",
                            reply_markup=keyboard,
                        )
                    else:
                        bot.send_message(
                            message.chat.id,
                            "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.",
                        )
                else:
                    send_error_message(
                        message,
                        "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    )
            else:
                send_error_message(
                    message,
                    "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                )
        else:
            return f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –¥–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º {car_data} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 250,000 —Å–æ–º."
    else:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã."


def get_insurance_total():
    print_message("[–ó–ê–ü–†–û–°] –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –û–¢–ß√ã–¢ –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï")

    global car_id_external

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver —Å –Ω—É–∂–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    chrome_options = Options()
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--remote-debugging-port=9222")
    chrome_options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    )

    service = Service(CHROMEDRIVER_PATH)

    # –§–æ—Ä–º–∏—Ä—É–µ–º URL
    url = f"https://fem.encar.com/cars/report/accident/{car_id_external}"

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebDriver
        driver = webdriver.Chrome(service=service, options=chrome_options)
        driver.get(url)

        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç 'smlist' –±–µ–∑ —è–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
        time.sleep(2)
        try:
            report_accident_summary_element = WebDriverWait(driver, 6).until(
                EC.presence_of_element_located(
                    (By.CLASS_NAME, "ReportAccidentSummary_list_accident__q6vLx")
                )
            )
        except NoSuchElementException:
            print("–≠–ª–µ–º–µ–Ω—Ç 'ReportAccidentSummary_list_accident__q6vLx' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"]

        report_accident_summary_element_splitted = (
            report_accident_summary_element.text.split("\n")
        )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car = (
            report_accident_summary_element_splitted[4]
            if len(report_accident_summary_element.text) > 4
            else "0"
        )
        damage_to_other_car = (
            report_accident_summary_element_splitted[5]
            if len(report_accident_summary_element.text) > 5
            else "0"
        )

        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞
        def extract_large_number(damage_text):
            if "ÏóÜÏùå" in damage_text:
                return "0"
            numbers = re.findall(r"[\d,]+(?=\s*Ïõê)", damage_text)
            return numbers[0] if numbers else "0"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        damage_to_my_car_formatted = extract_large_number(damage_to_my_car)
        damage_to_other_car_formatted = extract_large_number(damage_to_other_car)

        return [damage_to_my_car_formatted, damage_to_other_car_formatted]

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", ""]

    finally:
        driver.quit()


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global car_data, car_id_external, current_country

    if call.data.startswith("detail"):
        detail_message = ""

        if current_country == "Russia":
            print_message("[–†–û–°–°–ò–Ø] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

            details = {
                "car_price_korea": car_data.get("result")["price"]["car"]["rub"],
                "dealer_fee": car_data.get("result")["price"]["korea"]["ab"]["rub"],
                "korea_logistics": car_data.get("result")["price"]["korea"]["logistic"][
                    "rub"
                ],
                "customs_fee": car_data.get("result")["price"]["korea"]["dutyCleaning"][
                    "rub"
                ],
                "delivery_fee": car_data.get("result")["price"]["korea"]["delivery"][
                    "rub"
                ],
                "dealer_commission": car_data.get("result")["price"]["korea"][
                    "dealerCommission"
                ]["rub"],
                "russiaDuty": car_data.get("result")["price"]["russian"]["duty"]["rub"],
                "recycle_fee": car_data.get("result")["price"]["russian"][
                    "recyclingFee"
                ]["rub"],
                "registration": car_data.get("result")["price"]["russian"][
                    "registration"
                ]["rub"],
                "sbkts": car_data.get("result")["price"]["russian"]["sbkts"]["rub"],
                "svhAndExpertise": car_data.get("result")["price"]["russian"][
                    "svhAndExpertise"
                ]["rub"],
                "delivery": car_data.get("result")["price"]["russian"]["delivery"][
                    "rub"
                ],
            }

            car_price_formatted = format_number(details["car_price_korea"])
            dealer_fee_formatted = format_number(details["dealer_fee"])
            korea_logistics_formatted = format_number(details["korea_logistics"])
            delivery_fee_formatted = format_number(details["delivery_fee"])
            dealer_commission_formatted = format_number(details["dealer_commission"])
            russia_duty_formatted = format_number(details["russiaDuty"])
            registration_formatted = format_number(details["registration"])
            sbkts_formatted = format_number(details["sbkts"])
            svh_expertise_formatted = format_number(details["svhAndExpertise"])

            # Construct cost breakdown message
            detail_message = (
                "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: <b>{car_price_formatted}‚ÇΩ</b>\n\n"
                f"–£—Å–ª—É–≥–∏ BMAutoExport: <b>{dealer_fee_formatted}‚ÇΩ</b>\n\n"
                f"–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –ø–æ –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–µ: <b>{korea_logistics_formatted}‚ÇΩ</b>\n\n"
                f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: <b>{delivery_fee_formatted}‚ÇΩ</b>\n\n"
                f"–ö–æ–º–∏—Å—Å–∏—è –¥–∏–ª–µ—Ä–∞: <b>{dealer_commission_formatted}‚ÇΩ</b>\n\n"
                f"–ï–¥–∏–Ω–∞—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–ï–¢–°): <b>{russia_duty_formatted}‚ÇΩ</b>\n\n"
                f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: <b>{registration_formatted}‚ÇΩ</b>\n\n"
                f"–°–ë–ö–¢–°: <b>{sbkts_formatted}‚ÇΩ</b>\n\n"
                f"–°–í–• + –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: <b>{svh_expertise_formatted}‚ÇΩ</b>\n\n"
            )

        if current_country == "Kazakhstan":
            print_message("[–ö–ê–ó–ê–•–°–¢–ê–ù] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

            engine_capacity = int(car_data.get("result")["car"]["engineVolume"])
            car_year = re.search(r"\d{4}", car_data.get("result")["car"]["date"]).group(
                0
            )
            car_price_krw = car_data.get("result")["price"]["car"]["krw"]
            car_price_kzt = car_price_krw * krw_rate_kz
            car_price_formatted = format_number(car_price_kzt)

            dealer_fee_formatted = format_number(400000 * krw_rate_kz)
            delivery_fee_formatted = format_number(2500 * usd_rate_kz)
            customs_fee_kzt = format_number(
                calculate_customs_fee_kzt(car_price_kzt, car_year)
            )
            vat = format_number(car_price_kzt * 0.12)
            excise_fee = (
                0
                if engine_capacity < 3000
                else format_number(100 * (engine_capacity - 3000))
            )

            detail_message = (
                "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: <b>{car_price_formatted} ‚Ç∏</b>\n\n"
                f"–£—Å–ª—É–≥–∏ BMAutoExport: <b>{dealer_fee_formatted} ‚Ç∏</b>\n\n"
                f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ê–ª–º–∞—Ç—ã: <b>{delivery_fee_formatted} ‚Ç∏</b>\n\n"
                f"–¢–∞—Ä–∏—Ñ –¢–∞–º–æ–∂–µ–Ω–Ω–æ–π –û—á–∏—Å—Ç–∫–∏: <b>{customs_fee_kzt} ‚Ç∏</b>\n\n"
                f"–ù–î–° (12%): <b>{vat} ‚Ç∏</b>\n\n"
                f"–û–ø–ª–∞—Ç–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∑–∞ –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, +6–º—Ä–ø: <b>{format_number(25152)} ‚Ç∏</b>\n\n"
                f"–û–ø–ª–∞—Ç–∞ –ê–∫—Ü–∏–∑–∞ (–¥–æ 3-—Ö –ª–∏—Ç—Ä–æ–≤ 0 ‚Ç∏, –æ—Ç 3-—Ö –ª–∏—Ç—Ä–æ–≤ –∏ –≤—ã—à–µ 100 ‚Ç∏/—Å–º3):\n<b>{excise_fee} ‚Ç∏</b>\n\n"
            )

        if current_country == "Kyrgyzstan":
            print_message("[–ö–´–†–ì–´–ó–°–¢–ê–ù] –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–ß√ã–¢–ê")

            usd_krw_rate = get_usd_to_krw_rate()

            engine_capacity = int(car_data.get("result")["car"]["engineVolume"])
            car_price_krw = car_data.get("result")["price"]["car"]["krw"]
            car_price_usd = car_price_krw / usd_krw_rate
            car_year = re.search(r"\d{4}", car_data.get("result")["car"]["date"]).group(
                0
            )

            car_price_formatted = format_number(car_price_usd)
            dealer_fee_formatted = format_number(440000 / usd_krw_rate)
            delivery_fee_formatted = format_number(2500)

            #  TODO : CHANGE THE FRAHT FEE
            fraht_fee = format_number(1500000 / usd_krw_rate)

            detail_message = (
                "üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞:\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ: <b>{car_price_formatted}$</b>\n\n"
                f"–£—Å–ª—É–≥–∏ BMAutoExport: <b>{dealer_fee_formatted}$</b>\n\n"
                f"–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ë–∏—à–∫–µ–∫–∞: <b>{delivery_fee_formatted}$</b>\n\n"
                f"–§—Ä–∞—Ö—Ç: <b>{fraht_fee}$</b>\n\n"
            )

        bot.send_message(call.message.chat.id, detail_message, parse_mode="HTML")

        # Inline buttons for further actions
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                callback_data="calculate_another",
            )
        )
        keyboard.add(
            types.InlineKeyboardButton(
                "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/MANAGER"
            )
        )

        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=keyboard,
        )

    elif call.data == "technical_report":
        # Retrieve insurance information
        insurance_info = get_insurance_total()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if "–û—à–∏–±–∫–∞" in insurance_info[0] or "–û—à–∏–±–∫–∞" in insurance_info[1]:
            error_message = (
                "–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. \n\n"
                f'<a href="https://fem.encar.com/cars/detail/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/MANAGER"
                )
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            bot.send_message(
                call.message.chat.id,
                error_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )
        else:
            current_car_insurance_payments = (
                "0" if len(insurance_info[0]) == 0 else insurance_info[0]
            )
            other_car_insurance_payments = (
                "0" if len(insurance_info[1]) == 0 else insurance_info[1]
            )

            # Construct the message for the technical report
            tech_report_message = (
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é: \n<b>{current_car_insurance_payments} ‚Ç©</b>\n\n"
                f"–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –î–¢–ü: \n<b>{other_car_insurance_payments} ‚Ç©</b>\n\n"
                f'<a href="https://fem.encar.com/cars/report/inspect/{car_id_external}">üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ö–µ–º—É –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∫—É–∑–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ üîó</a>'
            )

            # Inline buttons for further actions
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(
                types.InlineKeyboardButton(
                    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                    callback_data="calculate_another",
                )
            )
            keyboard.add(
                types.InlineKeyboardButton(
                    "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/MANAGER"
                )
            )

            bot.send_message(
                call.message.chat.id,
                tech_report_message,
                parse_mode="HTML",
                reply_markup=keyboard,
            )

    elif call.data == "calculate_another":
        # user_data[call.message.chat.id] = {}  # –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω—ã
        show_country_selection(call.message.chat.id)
